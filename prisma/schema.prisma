datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER
  PROJECT_MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  phone     String
  companyId String?   @db.ObjectId  // Make this an ObjectId to match Company.id
  createdAt DateTime  @default(now())

  // Relations
  projects  Project[]
  company   Company?  @relation(fields: [companyId], references: [id])
}

model Employee {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  role      Role?     // Role is nullable if needed
  email     String    @unique
  phone     String?
  password  String
  companyId String?   @db.ObjectId  // Make this an ObjectId to match Company.id
  createdAt DateTime  @default(now())

  // Relations
  projects  Project[]
  tasks     Task[]
  company   Company?  @relation(fields: [companyId], references: [id])
}

model Project {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  userId      String         @db.ObjectId  // Make this an ObjectId to match User.id
  employeeId  String         @db.ObjectId  // Make this an ObjectId to match Employee.id
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  status      ProjectStatus? // Nullable project status

  // Relations
  user        User           @relation(fields: [userId], references: [id])
  employee    Employee       @relation(fields: [employeeId], references: [id])
  payments    Payment[]      // Payments for this project
  tasks       Task[]         // Tasks for this project
}

model Payment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String    @db.ObjectId  // Make this an ObjectId to match Project.id
  amount      String
  status      String
  dueDate     DateTime
  companyId   String    @db.ObjectId  // Make this an ObjectId to match Company.id
  createdAt   DateTime   @default(now())

  // Relations
  project     Project    @relation(fields: [projectId], references: [id])
  company     Company?   @relation(fields: [companyId], references: [id])
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String     @db.ObjectId  // Make this an ObjectId to match Project.id
  employeeId  String     @db.ObjectId  // Make this an ObjectId to match Employee.id
  description String
  status      String
  dueDate     DateTime
  createdAt   DateTime   @default(now())

  // Relations
  project     Project    @relation(fields: [projectId], references: [id])
  employee    Employee   @relation(fields: [employeeId], references: [id])
}

model Company {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  phone       String
  logo        String
  createdAt   DateTime   @default(now())

  // Relations
  employees   Employee[]
  payments    Payment[]
  users       User[]
}
